picnic 과제

느낀점
	수학적 사고가 귀찮아서 회피하려는 습관이 있음 : 머리쓰는 걸 피하려는 인간의 본능 때문인듯
		예를 들면, taken배열에서 짝이 없는 학생은 true 이고
			짝이 있는 학생 중에 짝을 찾은 학생은 true 이고
			짝이 있는 학생 중에 짝을 못 찾은 학생은 false여야 하고,
				짝이 있는 학생 중, 짝을 못 찾은 학생들에 대해 알고리즘을 수행해야 하므로 (!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!중요)
				모두 true로 초기화 한 후, 짝이 있는 학생 중, 짝을 못 찾은 학생들만 선별해서 false로 바꿔준다.

				bool taken[10];
				for(int i=0; i<10; i++)
					taken[i]=true;	//모두 true로 초기화
				for(int i=0; i<2*m; i++)
					taken[stuPair[i]]=false; //stuPair에 들어 있는 학생(짞이 있는 학생)만 false 로 만듬

				---------------------------------------------------------------------------------------------
				for(int pairWith=firstFree+1; pairWith<n; pairWith++)
				{
					if(!taken[pairWith]&&areFriends[firstFree][pairWith])
					{
						taken[firstFree]=taken[pairWith]=true;
							// 짝이 있는 학생 중, 짝은 못 찾은 학생(false)들 중에 이번에 찾은 것을 짝을 찾았은 학생들은 true로 바꿈
						ret += countParings(taken);
						taken[firstFree]=taken[pairWIth]=false;
							// 다른 경우의 수 탐색을 위해 원래대로
					}
				}

	0 1 처럼 짝의 순서가 작은것, 큰것 순으로 들어오면 잘 찾아 지는데 1 0처럼 짝의 순서가 큰것, 작은 것 순으로 들어오면 경우의 수를 count 못하는 bug 발견
	왜일까?? ( 생각 안 함 ) 그냥 matrix에서
	0 1 1 0
	0 0 1 1
	0 0 0 1
	1 0 0 0 을

	0 1 1 1
	0 0 1 1
	0 0 0 1
	0 0 0 0 으로 바꿔주는 동작을 추가

		for(int i=0; i<10; i++)
		{
			for(int j=0; j<i; j++)
			{
				if(areFriends[i][j]==true)
				{
					areFriends[j][i]=areFriends]i][j];
					areFriends[i][j]=false;
				}
			}
		}
	를 넣었는데, 역시 이렇게 하면 된다는 것만 알겠고 이 동작이 구체적으로 어떻게 돌아가는 지에 대한 수학적인 사고를 생략함 (반성하고 있지만 여전히 귀찮음)
	그래서 이 review를 쓰면서 해보자.
	i는 행, j는 열이다. 0행 -> 1행 (0열) -> 2행 (0열 ~ 1열) -> 3행 (0열 ~ 2열) -> ~~~ -> 8행(0열~ 7열)->9행(0열 ~ 8열) 으로 탐색
	탐색하는 원소만 1로 표현하면

	0 0 0 0 0 0 0 0 0 0
	1 0 0 0 0 0 0 0 0 0
	1 1 0 0 0 0 0 0 0 0
	1 1 1 0 0 0 0 0 0 0
	1 1 1 1 0 0 0 0 0 0
	1 1 1 1 1 0 0 0 0 0
	1 1 1 1 1 1 0 0 0 0
	1 1 1 1 1 1 1 0 0 0
	1 1 1 1 1 1 1 1 0 0
	1 1 1 1 1 1 1 1 1 0

	이렇게 된다 즉 lower triangle 성분만 탐색, 이 성분들 중에 참 값이 있으면 그 성분만 transpose하고 0으로 만들어 줘서 구현함


	-----------------------------------------------------------------------------------------------------------------------------------------
	재미있었고 앞으로도 이렇게 몇 일이 걸리더라도 한 문제라도 확실히 공부하자 화이팅!
	나는 나날이 발전하는 개발자다!
